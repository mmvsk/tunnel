#compdef tunnel


_has_option() {
	local option="${1-}"
	local words=("${@:2}")

	for word in "${words[@]}"; do
		if [[ $word == $option ]]; then
			return 0
		fi
	done

	return 1
}


_tunnel() {
	_arguments '1: :(create kill help)' '2: :->command_param_1' '3: :->command_param_2' '4: :->command_param_3'

	local remote_ports=(__default_tunnel_remote_ports) # only the first ons is enough: better autocomplete
	local local_ports=(__default_tunnel_local_ports) # only the first one is enough: better autocomplete
	local kill_option="--kill"

	local command_name="${words[2]}"
	local command_args=("${words[@]:2}")

	case "$state" in
		command_param_1)
			case "$command_name" in
				create)
					compadd -- "${remote_ports[@]}" "$kill_option"
					;;
				kill)
					compadd -- "${remote_ports[@]}"
					;;
			esac
			;;

		command_param_2)
			if [[ $command_name == "create" ]]; then
				if _has_option "$kill_option" "${command_args[@]}"; then
					compadd -- "${remote_ports[@]}"
				else
					compadd -- "${local_ports[@]}" "$kill_option"
				fi
			fi
			;;

		command_param_3)
			if [[ $command_name == "create" ]]; then
				if _has_option "$kill_option" "${command_args[@]}"; then
					compadd -- "${local_ports[@]}"
				else
					compadd -- "$kill_option"
				fi
			fi
			;;

	esac
}


compdef _tunnel tunnel
